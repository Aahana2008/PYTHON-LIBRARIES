import numpy as np


# NumPy helps you handle large numerical data easily and efficiently.
# It‚Äôs mainly used for mathematical operations on arrays (like advanced lists).


# 1Ô∏è‚É£ Create a NumPy array from a Python list
py_list = [5, 15, 25, 35]
arr = np.array(py_list)
print('Original array:', arr)
print('Type:', type(arr), '| Shape:', arr.shape, '| Data Type:', arr.dtype)


# 2Ô∏è‚É£ Convert array data type (int ‚Üí float)
arr_float = arr.astype(float)
print('\nArray converted to float:', arr_float)


# 3Ô∏è‚É£ Create sequences easily
seq1 = np.arange(0, 12, 3) # Start=0, Stop=12, Step=3
seq2 = np.linspace(0, 1, 5) # 5 equally spaced values between 0 and 1
print('\nSequence using arange:', seq1)
print('Sequence using linspace:', seq2)


# 4Ô∏è‚É£ Common arrays: zeros, ones, repeat
zeros = np.zeros(6)
ones = np.ones((2, 3))
repeated = np.repeat(7, 4)
print('\nZeros:', zeros)
print('Ones matrix:\n', ones)
print('Repeated 7s:', repeated)


# 5Ô∏è‚É£ Generate random numbers
rand_vals = np.random.random(5)
rand_ints = np.random.randint(0, 100, 4)
print('\nRandom float numbers:', rand_vals)
print('Random integers:', rand_ints)


# 6Ô∏è‚É£ Basic math & stats
data = np.arange(1, 11)
print('\nSum:', data.sum(), '| Mean:', data.mean(), '| Median:', np.median(data))
print('Standard Deviation:', np.std(data), '| Variance:', np.var(data))


# 7Ô∏è‚É£ 2D Array example
M = np.array([[1, 4, 3], [7, 8, 2], [0, 5, 6]])
print('\nMatrix M:\n', M)
print('Shape:', M.shape, '| Max:', M.max(), '| Min:', M.min())


# 8Ô∏è‚É£ Indexing & slicing
b = np.array([10, 11, 12, 13, 14, 15])
print('\nArray b:', b)
print('First element:', b[0])
print('Slice (2:5):', b[2:5])
print('Last element:', b[-1])


# 9Ô∏è‚É£ Boolean masking (filtering values)
nums = np.arange(0, 20)
evens = nums[nums % 2 == 0]
odds = nums[nums % 2 == 1]
print('\nEven numbers:', evens)
print('Odd numbers:', odds)


# üîü Replace values conditionally using np.where
replaced = np.where(nums == 10, 999, nums)
print('\nReplace 10 with 999:', replaced)


# 11Ô∏è‚É£ Modify specific positions using np.put
p = np.arange(0, 50, 10)
np.put(p, [0, 2], [77, 88])
print('After np.put:', p)


# 12Ô∏è‚É£ Handle missing or infinite values
arr_with_nan = np.array([1.0, np.nan, 3.0, np.inf])
mask_nan = np.isnan(arr_with_nan)
print('Only in x1:', only_in_x1)
