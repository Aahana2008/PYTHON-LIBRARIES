This code has been tested on google colab-https://colab.research.google.com/drive/1pXhSpcIXx_J4i9QW1aRDDXs8AJUKH2Lk

import pandas as pd  #  Always import pandas first



# 1️⃣ Create a Series (like a single column of data)


numbers = [10, 20, 30, 40, 50]
series = pd.Series(numbers)
print("Series:")
print(series)

# Series with custom index
series_named = pd.Series(numbers, index=['a', 'b', 'c', 'd', 'e'])
print("\nSeries with custom index:")
print(series_named)



# 2️⃣ Create a DataFrame (like a table)

data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'Diana'],
    'Age': [24, 30, 22, 28],
    'Score': [88, 92, 79, 85]
}

df = pd.DataFrame(data)
print("\nDataFrame:")
print(df)


# 3️⃣ Explore the Data


print("\nFirst few rows:")
print(df.head())

print("\nShape (rows, columns):", df.shape)
print("Column names:", df.columns.tolist())

print("\nSummary statistics:")
print(df.describe())



# 4️⃣ Access Data


print("\nAge column:")
print(df['Age'])

print("\nName and Score columns:")
print(df[['Name', 'Score']])

print("\nSecond row:")
print(df.iloc[1])

print("\nPeople with Score > 85:")
print(df[df['Score'] > 85])


# 5️⃣ Modify Data

# Add a new column
df['Passed'] = df['Score'] >= 80
print("\nAfter adding new column 'Passed':")
print(df)

# Update a value
df.loc[0, 'Score'] = 90
print("\nAfter updating Alice's score to 90:")
print(df)

# Remove a column
df = df.drop('Passed', axis=1)
print("\nAfter removing 'Passed' column:")
print(df)


# 6️⃣ Handle Missing Values


missing_data = pd.DataFrame({
    'A': [1, None, 3],
    'B': [None, 2, 3]
})
print("\nDataFrame with missing values:")
print(missing_data)

# Fill missing values with 0
print("\nFill missing values with 0:")
print(missing_data.fillna(0))

# Drop rows with missing data
print("\nDrop rows with missing data:")
print(missing_data.dropna())


# 7️⃣ Sort and Group Data


# Sort by Score
print("\nSort by Score (high to low):")
print(df.sort_values(by='Score', ascending=False))

# Group by Passed / Failed
df['Passed'] = df['Score'] >= 80
avg_score = df.groupby('Passed')['Score'].mean()
print("\nAverage score by pass/fail:")
print(avg_score)



